# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Experience {
  id: ID!
  title: String
  slug: String
  poster: ImageFieldOutput
  secondaryTitle: String
  startDate: DateTime
  endDate: DateTime
  status: String
  content: Experience_content_Document
  artworks(
    where: ArtworkWhereInput! = {}
    orderBy: [ArtworkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artwork!]
  artworksCount(where: ArtworkWhereInput! = {}): Int
}

interface ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Experience_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ExperienceWhereUniqueInput {
  id: ID
  slug: String
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  NOT: [ExperienceWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  secondaryTitle: StringFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  status: StringNullableFilter
  artworks: ArtworkManyRelationFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ArtworkManyRelationFilter {
  every: ArtworkWhereInput
  some: ArtworkWhereInput
  none: ArtworkWhereInput
}

input ExperienceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  secondaryTitle: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  status: OrderDirection
}

input ExperienceUpdateInput {
  title: String
  slug: String
  poster: ImageFieldInput
  secondaryTitle: String
  startDate: DateTime
  endDate: DateTime
  status: String
  content: JSON
  artworks: ArtworkRelateToManyForUpdateInput
}

input ImageFieldInput {
  upload: Upload
  ref: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ArtworkRelateToManyForUpdateInput {
  disconnect: [ArtworkWhereUniqueInput!]
  set: [ArtworkWhereUniqueInput!]
  create: [ArtworkCreateInput!]
  connect: [ArtworkWhereUniqueInput!]
}

input ExperienceUpdateArgs {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateInput!
}

input ExperienceCreateInput {
  title: String
  slug: String
  poster: ImageFieldInput
  secondaryTitle: String
  startDate: DateTime
  endDate: DateTime
  status: String
  content: JSON
  artworks: ArtworkRelateToManyForCreateInput
}

input ArtworkRelateToManyForCreateInput {
  create: [ArtworkCreateInput!]
  connect: [ArtworkWhereUniqueInput!]
}

type Artwork {
  id: ID!
  title: String
  artist: String
  slug: String
  startDate: DateTime
  endDate: DateTime
  status: String
  spotifyUrl: String
  soundcloudUrl: String
  audioFile: FileFieldOutput
  images: ImageFieldOutput
  overview: Artwork_overview_Document
}

interface FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type Artwork_overview_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ArtworkWhereUniqueInput {
  id: ID
  slug: String
}

type LocalFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type CloudFileFieldOutput implements FileFieldOutput {
  filename: String!
  filesize: Int!
  ref: String!
  url: String!
}

type LocalImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

type CloudImageFieldOutput implements ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  ref: String!
  url: String!
}

input ArtworkWhereInput {
  AND: [ArtworkWhereInput!]
  OR: [ArtworkWhereInput!]
  NOT: [ArtworkWhereInput!]
  id: IDFilter
  title: StringFilter
  artist: StringFilter
  slug: StringFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  status: StringNullableFilter
  spotifyUrl: StringFilter
  soundcloudUrl: StringFilter
}

input ArtworkOrderByInput {
  id: OrderDirection
  title: OrderDirection
  artist: OrderDirection
  slug: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  status: OrderDirection
  spotifyUrl: OrderDirection
  soundcloudUrl: OrderDirection
}

input ArtworkUpdateInput {
  title: String
  artist: String
  slug: String
  startDate: DateTime
  endDate: DateTime
  status: String
  spotifyUrl: String
  soundcloudUrl: String
  audioFile: FileFieldInput
  images: ImageFieldInput
  overview: JSON
}

input FileFieldInput {
  upload: Upload
  ref: String
}

input ArtworkUpdateArgs {
  where: ArtworkWhereUniqueInput!
  data: ArtworkUpdateInput!
}

input ArtworkCreateInput {
  title: String
  artist: String
  slug: String
  startDate: DateTime
  endDate: DateTime
  status: String
  spotifyUrl: String
  soundcloudUrl: String
  audioFile: FileFieldInput
  images: ImageFieldInput
  overview: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createExperience(data: ExperienceCreateInput!): Experience
  createExperiences(data: [ExperienceCreateInput!]!): [Experience]
  updateExperience(
    where: ExperienceWhereUniqueInput!
    data: ExperienceUpdateInput!
  ): Experience
  updateExperiences(data: [ExperienceUpdateArgs!]!): [Experience]
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteExperiences(where: [ExperienceWhereUniqueInput!]!): [Experience]
  createArtwork(data: ArtworkCreateInput!): Artwork
  createArtworks(data: [ArtworkCreateInput!]!): [Artwork]
  updateArtwork(
    where: ArtworkWhereUniqueInput!
    data: ArtworkUpdateInput!
  ): Artwork
  updateArtworks(data: [ArtworkUpdateArgs!]!): [Artwork]
  deleteArtwork(where: ArtworkWhereUniqueInput!): Artwork
  deleteArtworks(where: [ArtworkWhereUniqueInput!]!): [Artwork]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  experiences(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  experience(where: ExperienceWhereUniqueInput!): Experience
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  artworks(
    where: ArtworkWhereInput! = {}
    orderBy: [ArtworkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artwork!]
  artwork(where: ArtworkWhereUniqueInput!): Artwork
  artworksCount(where: ArtworkWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
