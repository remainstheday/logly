# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Site {
  id: ID!
  siteId: String
  title: String
  url: String
}

input SiteWhereUniqueInput {
  id: ID
  url: String
}

input SiteWhereInput {
  AND: [SiteWhereInput!]
  OR: [SiteWhereInput!]
  NOT: [SiteWhereInput!]
  id: IDFilter
  siteId: StringFilter
  title: StringFilter
  url: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input SiteOrderByInput {
  id: OrderDirection
  siteId: OrderDirection
  title: OrderDirection
  url: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SiteUpdateInput {
  siteId: String
  title: String
  url: String
}

input SiteUpdateArgs {
  where: SiteWhereUniqueInput!
  data: SiteUpdateInput!
}

input SiteCreateInput {
  siteId: String
  title: String
  url: String
}

type Experience {
  id: ID!
  status: ExperienceStatusType
  title: String
  startDate: DateTime
  endDate: DateTime
  experienceImages: String
  description: Experience_description_Document
  relatedArtifacts(
    where: ArtifactWhereInput! = {}
    orderBy: [ArtifactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artifact!]
  relatedArtifactsCount(where: ArtifactWhereInput! = {}): Int
  url: String
  siteId: String
  qrCodes: JSON
}

enum ExperienceStatusType {
  published
  draft
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type Experience_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ExperienceWhereUniqueInput {
  id: ID
  url: String
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  NOT: [ExperienceWhereInput!]
  id: IDFilter
  status: ExperienceStatusTypeNullableFilter
  title: StringFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  experienceImages: StringFilter
  relatedArtifacts: ArtifactManyRelationFilter
  url: StringFilter
  siteId: StringFilter
}

input ExperienceStatusTypeNullableFilter {
  equals: ExperienceStatusType
  in: [ExperienceStatusType!]
  notIn: [ExperienceStatusType!]
  not: ExperienceStatusTypeNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ArtifactManyRelationFilter {
  every: ArtifactWhereInput
  some: ArtifactWhereInput
  none: ArtifactWhereInput
}

input ExperienceOrderByInput {
  id: OrderDirection
  status: OrderDirection
  title: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  experienceImages: OrderDirection
  url: OrderDirection
  siteId: OrderDirection
}

input ExperienceUpdateInput {
  status: ExperienceStatusType
  title: String
  startDate: DateTime
  endDate: DateTime
  experienceImages: String
  description: JSON
  relatedArtifacts: ArtifactRelateToManyForUpdateInput
  url: String
  siteId: String
  qrCodes: JSON
}

input ArtifactRelateToManyForUpdateInput {
  disconnect: [ArtifactWhereUniqueInput!]
  set: [ArtifactWhereUniqueInput!]
  create: [ArtifactCreateInput!]
  connect: [ArtifactWhereUniqueInput!]
}

input ExperienceUpdateArgs {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateInput!
}

input ExperienceCreateInput {
  status: ExperienceStatusType
  title: String
  startDate: DateTime
  endDate: DateTime
  experienceImages: String
  description: JSON
  relatedArtifacts: ArtifactRelateToManyForCreateInput
  url: String
  siteId: String
  qrCodes: JSON
}

input ArtifactRelateToManyForCreateInput {
  create: [ArtifactCreateInput!]
  connect: [ArtifactWhereUniqueInput!]
}

type Artifact {
  id: ID!
  status: ArtifactStatusType
  title: String
  artist: String
  artifactImages: String
  audioFile: String
  description: Artifact_description_Document
  relatedExperiences(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  relatedExperiencesCount(where: ExperienceWhereInput! = {}): Int
  url: String
  siteId: String
  qrCodes: JSON
}

enum ArtifactStatusType {
  published
  draft
}

type Artifact_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ArtifactWhereUniqueInput {
  id: ID
  url: String
}

input ArtifactWhereInput {
  AND: [ArtifactWhereInput!]
  OR: [ArtifactWhereInput!]
  NOT: [ArtifactWhereInput!]
  id: IDFilter
  status: ArtifactStatusTypeNullableFilter
  title: StringFilter
  artist: StringFilter
  artifactImages: StringFilter
  audioFile: StringFilter
  relatedExperiences: ExperienceManyRelationFilter
  url: StringFilter
  siteId: StringFilter
}

input ArtifactStatusTypeNullableFilter {
  equals: ArtifactStatusType
  in: [ArtifactStatusType!]
  notIn: [ArtifactStatusType!]
  not: ArtifactStatusTypeNullableFilter
}

input ExperienceManyRelationFilter {
  every: ExperienceWhereInput
  some: ExperienceWhereInput
  none: ExperienceWhereInput
}

input ArtifactOrderByInput {
  id: OrderDirection
  status: OrderDirection
  title: OrderDirection
  artist: OrderDirection
  artifactImages: OrderDirection
  audioFile: OrderDirection
  url: OrderDirection
  siteId: OrderDirection
}

input ArtifactUpdateInput {
  status: ArtifactStatusType
  title: String
  artist: String
  artifactImages: String
  audioFile: String
  description: JSON
  relatedExperiences: ExperienceRelateToManyForUpdateInput
  url: String
  siteId: String
  qrCodes: JSON
}

input ExperienceRelateToManyForUpdateInput {
  disconnect: [ExperienceWhereUniqueInput!]
  set: [ExperienceWhereUniqueInput!]
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

input ArtifactUpdateArgs {
  where: ArtifactWhereUniqueInput!
  data: ArtifactUpdateInput!
}

input ArtifactCreateInput {
  status: ArtifactStatusType
  title: String
  artist: String
  artifactImages: String
  audioFile: String
  description: JSON
  relatedExperiences: ExperienceRelateToManyForCreateInput
  url: String
  siteId: String
  qrCodes: JSON
}

input ExperienceRelateToManyForCreateInput {
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

type User {
  id: ID!
  siteId: String
  isAdmin: Boolean
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  siteId: StringFilter
  isAdmin: BooleanFilter
  name: StringFilter
  email: StringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  siteId: OrderDirection
  isAdmin: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  siteId: String
  isAdmin: Boolean
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  siteId: String
  isAdmin: Boolean
  name: String
  email: String
  password: String
}

type SiteContent {
  id: ID!
  name: String
  title: String
  siteLogo: String
  logoWidth: String
  logoHeight: String
  staticPageImages: String
  description: SiteContent_description_Document
  url: String
  siteId: String
}

type SiteContent_description_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input SiteContentWhereUniqueInput {
  id: ID
  url: String
}

input SiteContentWhereInput {
  AND: [SiteContentWhereInput!]
  OR: [SiteContentWhereInput!]
  NOT: [SiteContentWhereInput!]
  id: IDFilter
  name: StringFilter
  title: StringFilter
  siteLogo: StringFilter
  logoWidth: StringFilter
  logoHeight: StringFilter
  staticPageImages: StringFilter
  url: StringFilter
  siteId: StringFilter
}

input SiteContentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  title: OrderDirection
  siteLogo: OrderDirection
  logoWidth: OrderDirection
  logoHeight: OrderDirection
  staticPageImages: OrderDirection
  url: OrderDirection
  siteId: OrderDirection
}

input SiteContentUpdateInput {
  name: String
  title: String
  siteLogo: String
  logoWidth: String
  logoHeight: String
  staticPageImages: String
  description: JSON
  url: String
  siteId: String
}

input SiteContentUpdateArgs {
  where: SiteContentWhereUniqueInput!
  data: SiteContentUpdateInput!
}

input SiteContentCreateInput {
  name: String
  title: String
  siteLogo: String
  logoWidth: String
  logoHeight: String
  staticPageImages: String
  description: JSON
  url: String
  siteId: String
}

type Comment {
  id: ID!
  username: String
  timestamp: DateTime
  comment: String
  image: String
  query: JSON
  siteId: String
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  username: StringFilter
  timestamp: DateTimeNullableFilter
  comment: StringFilter
  image: StringFilter
  siteId: StringFilter
}

input CommentOrderByInput {
  id: OrderDirection
  username: OrderDirection
  timestamp: OrderDirection
  comment: OrderDirection
  image: OrderDirection
  siteId: OrderDirection
}

input CommentUpdateInput {
  username: String
  timestamp: DateTime
  comment: String
  image: String
  query: JSON
  siteId: String
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  username: String
  timestamp: DateTime
  comment: String
  image: String
  query: JSON
  siteId: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createSite(data: SiteCreateInput!): Site
  createSites(data: [SiteCreateInput!]!): [Site]
  updateSite(where: SiteWhereUniqueInput!, data: SiteUpdateInput!): Site
  updateSites(data: [SiteUpdateArgs!]!): [Site]
  deleteSite(where: SiteWhereUniqueInput!): Site
  deleteSites(where: [SiteWhereUniqueInput!]!): [Site]
  createExperience(data: ExperienceCreateInput!): Experience
  createExperiences(data: [ExperienceCreateInput!]!): [Experience]
  updateExperience(
    where: ExperienceWhereUniqueInput!
    data: ExperienceUpdateInput!
  ): Experience
  updateExperiences(data: [ExperienceUpdateArgs!]!): [Experience]
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteExperiences(where: [ExperienceWhereUniqueInput!]!): [Experience]
  createArtifact(data: ArtifactCreateInput!): Artifact
  createArtifacts(data: [ArtifactCreateInput!]!): [Artifact]
  updateArtifact(
    where: ArtifactWhereUniqueInput!
    data: ArtifactUpdateInput!
  ): Artifact
  updateArtifacts(data: [ArtifactUpdateArgs!]!): [Artifact]
  deleteArtifact(where: ArtifactWhereUniqueInput!): Artifact
  deleteArtifacts(where: [ArtifactWhereUniqueInput!]!): [Artifact]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSiteContent(data: SiteContentCreateInput!): SiteContent
  createSiteContents(data: [SiteContentCreateInput!]!): [SiteContent]
  updateSiteContent(
    where: SiteContentWhereUniqueInput!
    data: SiteContentUpdateInput!
  ): SiteContent
  updateSiteContents(data: [SiteContentUpdateArgs!]!): [SiteContent]
  deleteSiteContent(where: SiteContentWhereUniqueInput!): SiteContent
  deleteSiteContents(where: [SiteContentWhereUniqueInput!]!): [SiteContent]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  sites(
    where: SiteWhereInput! = {}
    orderBy: [SiteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Site!]
  site(where: SiteWhereUniqueInput!): Site
  sitesCount(where: SiteWhereInput! = {}): Int
  experiences(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  experience(where: ExperienceWhereUniqueInput!): Experience
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  artifacts(
    where: ArtifactWhereInput! = {}
    orderBy: [ArtifactOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artifact!]
  artifact(where: ArtifactWhereUniqueInput!): Artifact
  artifactsCount(where: ArtifactWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  siteContents(
    where: SiteContentWhereInput! = {}
    orderBy: [SiteContentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SiteContent!]
  siteContent(where: SiteContentWhereUniqueInput!): SiteContent
  siteContentsCount(where: SiteContentWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
