# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type Site {
  id: ID!
  Title: String
  slug: String
}

input SiteWhereUniqueInput {
  id: ID
}

input SiteWhereInput {
  AND: [SiteWhereInput!]
  OR: [SiteWhereInput!]
  NOT: [SiteWhereInput!]
  id: IDFilter
  Title: StringFilter
  slug: StringFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input SiteOrderByInput {
  id: OrderDirection
  Title: OrderDirection
  slug: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input SiteUpdateInput {
  Title: String
  slug: String
}

input SiteUpdateArgs {
  where: SiteWhereUniqueInput!
  data: SiteUpdateInput!
}

input SiteCreateInput {
  Title: String
  slug: String
}

type Artwork {
  id: ID!
  status: String
  title: String
  artist: String
  relatedExperiences(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  relatedExperiencesCount(where: ExperienceWhereInput! = {}): Int
  startDate: DateTime
  endDate: DateTime
  images: CloudinaryImage_File
  artworkImages: String
  audioFile: String
  description: String
  url: String
  siteId: String
  qrCodes: JSON
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ArtworkWhereUniqueInput {
  id: ID
  url: String
}

input ArtworkWhereInput {
  AND: [ArtworkWhereInput!]
  OR: [ArtworkWhereInput!]
  NOT: [ArtworkWhereInput!]
  id: IDFilter
  status: StringNullableFilter
  title: StringFilter
  artist: StringFilter
  relatedExperiences: ExperienceManyRelationFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  artworkImages: StringFilter
  audioFile: StringFilter
  description: StringFilter
  url: StringFilter
  siteId: StringFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input ExperienceManyRelationFilter {
  every: ExperienceWhereInput
  some: ExperienceWhereInput
  none: ExperienceWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input ArtworkOrderByInput {
  id: OrderDirection
  status: OrderDirection
  title: OrderDirection
  artist: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  artworkImages: OrderDirection
  audioFile: OrderDirection
  description: OrderDirection
  url: OrderDirection
  siteId: OrderDirection
}

input ArtworkUpdateInput {
  status: String
  title: String
  artist: String
  relatedExperiences: ExperienceRelateToManyForUpdateInput
  startDate: DateTime
  endDate: DateTime
  images: Upload
  artworkImages: String
  audioFile: String
  description: String
  url: String
  siteId: String
  qrCodes: JSON
}

input ExperienceRelateToManyForUpdateInput {
  disconnect: [ExperienceWhereUniqueInput!]
  set: [ExperienceWhereUniqueInput!]
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ArtworkUpdateArgs {
  where: ArtworkWhereUniqueInput!
  data: ArtworkUpdateInput!
}

input ArtworkCreateInput {
  status: String
  title: String
  artist: String
  relatedExperiences: ExperienceRelateToManyForCreateInput
  startDate: DateTime
  endDate: DateTime
  images: Upload
  artworkImages: String
  audioFile: String
  description: String
  url: String
  siteId: String
  qrCodes: JSON
}

input ExperienceRelateToManyForCreateInput {
  create: [ExperienceCreateInput!]
  connect: [ExperienceWhereUniqueInput!]
}

type User {
  id: ID!
  siteId: String
  isAdmin: Boolean
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  siteId: StringFilter
  isAdmin: BooleanFilter
  name: StringFilter
  email: StringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input UserOrderByInput {
  id: OrderDirection
  siteId: OrderDirection
  isAdmin: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  siteId: String
  isAdmin: Boolean
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  siteId: String
  isAdmin: Boolean
  name: String
  email: String
  password: String
}

type Experience {
  id: ID!
  siteId: String
  title: String
  slug: String
  poster: CloudinaryImage_File
  experienceImages: String
  startDate: DateTime
  endDate: DateTime
  status: String
  description: String
  relatedArtworks(
    where: ArtworkWhereInput! = {}
    orderBy: [ArtworkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artwork!]
  relatedArtworksCount(where: ArtworkWhereInput! = {}): Int
}

input ExperienceWhereUniqueInput {
  id: ID
  slug: String
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  NOT: [ExperienceWhereInput!]
  id: IDFilter
  siteId: StringFilter
  title: StringFilter
  slug: StringFilter
  experienceImages: StringFilter
  startDate: DateTimeNullableFilter
  endDate: DateTimeNullableFilter
  status: StringNullableFilter
  description: StringFilter
  relatedArtworks: ArtworkManyRelationFilter
}

input ArtworkManyRelationFilter {
  every: ArtworkWhereInput
  some: ArtworkWhereInput
  none: ArtworkWhereInput
}

input ExperienceOrderByInput {
  id: OrderDirection
  siteId: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  experienceImages: OrderDirection
  startDate: OrderDirection
  endDate: OrderDirection
  status: OrderDirection
  description: OrderDirection
}

input ExperienceUpdateInput {
  siteId: String
  title: String
  slug: String
  poster: Upload
  experienceImages: String
  startDate: DateTime
  endDate: DateTime
  status: String
  description: String
  relatedArtworks: ArtworkRelateToManyForUpdateInput
}

input ArtworkRelateToManyForUpdateInput {
  disconnect: [ArtworkWhereUniqueInput!]
  set: [ArtworkWhereUniqueInput!]
  create: [ArtworkCreateInput!]
  connect: [ArtworkWhereUniqueInput!]
}

input ExperienceUpdateArgs {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateInput!
}

input ExperienceCreateInput {
  siteId: String
  title: String
  slug: String
  poster: Upload
  experienceImages: String
  startDate: DateTime
  endDate: DateTime
  status: String
  description: String
  relatedArtworks: ArtworkRelateToManyForCreateInput
}

input ArtworkRelateToManyForCreateInput {
  create: [ArtworkCreateInput!]
  connect: [ArtworkWhereUniqueInput!]
}

type StaticContent {
  id: ID!
  name: String
  siteId: String
  title: String
  poster: CloudinaryImage_File
  staticPageImages: String
  slug: String
  description: String
}

input StaticContentWhereUniqueInput {
  id: ID
  slug: String
}

input StaticContentWhereInput {
  AND: [StaticContentWhereInput!]
  OR: [StaticContentWhereInput!]
  NOT: [StaticContentWhereInput!]
  id: IDFilter
  name: StringFilter
  siteId: StringFilter
  title: StringFilter
  staticPageImages: StringFilter
  slug: StringFilter
  description: StringFilter
}

input StaticContentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  siteId: OrderDirection
  title: OrderDirection
  staticPageImages: OrderDirection
  slug: OrderDirection
  description: OrderDirection
}

input StaticContentUpdateInput {
  name: String
  siteId: String
  title: String
  poster: Upload
  staticPageImages: String
  slug: String
  description: String
}

input StaticContentUpdateArgs {
  where: StaticContentWhereUniqueInput!
  data: StaticContentUpdateInput!
}

input StaticContentCreateInput {
  name: String
  siteId: String
  title: String
  poster: Upload
  staticPageImages: String
  slug: String
  description: String
}

type Comment {
  id: ID!
  experienceId: String
  siteId: String
  artworkId: String
  username: String
  image: String
  comment: String
}

input CommentWhereUniqueInput {
  id: ID
}

input CommentWhereInput {
  AND: [CommentWhereInput!]
  OR: [CommentWhereInput!]
  NOT: [CommentWhereInput!]
  id: IDFilter
  experienceId: StringFilter
  siteId: StringFilter
  artworkId: StringFilter
  username: StringFilter
  image: StringFilter
  comment: StringFilter
}

input CommentOrderByInput {
  id: OrderDirection
  experienceId: OrderDirection
  siteId: OrderDirection
  artworkId: OrderDirection
  username: OrderDirection
  image: OrderDirection
  comment: OrderDirection
}

input CommentUpdateInput {
  experienceId: String
  siteId: String
  artworkId: String
  username: String
  image: String
  comment: String
}

input CommentUpdateArgs {
  where: CommentWhereUniqueInput!
  data: CommentUpdateInput!
}

input CommentCreateInput {
  experienceId: String
  siteId: String
  artworkId: String
  username: String
  image: String
  comment: String
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createSite(data: SiteCreateInput!): Site
  createSites(data: [SiteCreateInput!]!): [Site]
  updateSite(where: SiteWhereUniqueInput!, data: SiteUpdateInput!): Site
  updateSites(data: [SiteUpdateArgs!]!): [Site]
  deleteSite(where: SiteWhereUniqueInput!): Site
  deleteSites(where: [SiteWhereUniqueInput!]!): [Site]
  createArtwork(data: ArtworkCreateInput!): Artwork
  createArtworks(data: [ArtworkCreateInput!]!): [Artwork]
  updateArtwork(
    where: ArtworkWhereUniqueInput!
    data: ArtworkUpdateInput!
  ): Artwork
  updateArtworks(data: [ArtworkUpdateArgs!]!): [Artwork]
  deleteArtwork(where: ArtworkWhereUniqueInput!): Artwork
  deleteArtworks(where: [ArtworkWhereUniqueInput!]!): [Artwork]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createExperience(data: ExperienceCreateInput!): Experience
  createExperiences(data: [ExperienceCreateInput!]!): [Experience]
  updateExperience(
    where: ExperienceWhereUniqueInput!
    data: ExperienceUpdateInput!
  ): Experience
  updateExperiences(data: [ExperienceUpdateArgs!]!): [Experience]
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteExperiences(where: [ExperienceWhereUniqueInput!]!): [Experience]
  createStaticContent(data: StaticContentCreateInput!): StaticContent
  createStaticContents(data: [StaticContentCreateInput!]!): [StaticContent]
  updateStaticContent(
    where: StaticContentWhereUniqueInput!
    data: StaticContentUpdateInput!
  ): StaticContent
  updateStaticContents(data: [StaticContentUpdateArgs!]!): [StaticContent]
  deleteStaticContent(where: StaticContentWhereUniqueInput!): StaticContent
  deleteStaticContents(
    where: [StaticContentWhereUniqueInput!]!
  ): [StaticContent]
  createComment(data: CommentCreateInput!): Comment
  createComments(data: [CommentCreateInput!]!): [Comment]
  updateComment(
    where: CommentWhereUniqueInput!
    data: CommentUpdateInput!
  ): Comment
  updateComments(data: [CommentUpdateArgs!]!): [Comment]
  deleteComment(where: CommentWhereUniqueInput!): Comment
  deleteComments(where: [CommentWhereUniqueInput!]!): [Comment]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  sites(
    where: SiteWhereInput! = {}
    orderBy: [SiteOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Site!]
  site(where: SiteWhereUniqueInput!): Site
  sitesCount(where: SiteWhereInput! = {}): Int
  artworks(
    where: ArtworkWhereInput! = {}
    orderBy: [ArtworkOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Artwork!]
  artwork(where: ArtworkWhereUniqueInput!): Artwork
  artworksCount(where: ArtworkWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  experiences(
    where: ExperienceWhereInput! = {}
    orderBy: [ExperienceOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Experience!]
  experience(where: ExperienceWhereUniqueInput!): Experience
  experiencesCount(where: ExperienceWhereInput! = {}): Int
  staticContents(
    where: StaticContentWhereInput! = {}
    orderBy: [StaticContentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [StaticContent!]
  staticContent(where: StaticContentWhereUniqueInput!): StaticContent
  staticContentsCount(where: StaticContentWhereInput! = {}): Int
  comments(
    where: CommentWhereInput! = {}
    orderBy: [CommentOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Comment!]
  comment(where: CommentWhereUniqueInput!): Comment
  commentsCount(where: CommentWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
